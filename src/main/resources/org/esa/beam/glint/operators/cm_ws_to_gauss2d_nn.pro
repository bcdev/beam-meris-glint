pro help_cm_ws_to_gauss2d_nn
a=   ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
a=[a,";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"]
a=[a,";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"]
a=[a,";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"]
a=[a,";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"]
a=[a,";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"]
a=[a,";;;;                                                             ;;;;;;;"]
a=[a,";;;;     This is a neural net generated by bck                   ;;;;;;;"]
a=[a,";;;;                Version: Feb. 2000                           ;;;;;;;"]
a=[a,";;;;                                                             ;;;;;;;"]
a=[a,";;;;     Date: Mon Sep 29 20:12:36 2008                          ;;;;;;;"]
a=[a,";;;;     Used train data:    cm_ws_to_gauss_2d.trn               ;;;;;;;"]
a=[a,";;;;     Used test data:     cm_ws_to_gauss_2d.tst               ;;;;;;;"]
a=[a,";;;;                                                             ;;;;;;;"]
a=[a,";;;;     It can be used like any other idl-function:             ;;;;;;;"]
a=[a,";;;;                                                             ;;;;;;;"]
a=[a,";;;;     Result = cm_ws_to_gauss2d_nn(Input  $                   ;;;;;;;"]
a=[a,";;;;                           ,index=index                $     ;;;;;;;"]
a=[a,";;;;                           ,return_partial_differential=rpd  $ ;;;;;;;"]
a=[a,";;;;                           ,/no_warn )                       ;;;;;;;"]
a=[a,";;;;            or                                               ;;;;;;;"]
a=[a,";;;;                                                             ;;;;;;;"]
a=[a,";;;;     Result = cm_ws_to_gauss2d_nn(/help)                     ;;;;;;;"]
a=[a,";;;;                                                             ;;;;;;;"]
a=[a,";;;;     Input must be array of the dimension (*,  3) or (  3)   ;;;;;;;"]
a=[a,";;;;     Result is an array of the dimension  (*,  4) or (  4)   ;;;;;;;"]
a=[a,";;;;                                                             ;;;;;;;"]
a=[a,";;;;     Names of Input and Output (from train data)             ;;;;;;;"]
a=[a,";;;;     Input   1:       ws (min =  1.00e+00  max =  1.50e+01)  ;;;;;;;"]
a=[a,";;;;     Input   2:    n_ref (min =  1.30e+00  max =  1.40e+00)  ;;;;;;;"]
a=[a,";;;;     Input   3:  cos_sun (min =  6.04e-01  max =  9.93e-01)  ;;;;;;;"]
a=[a,";;;;     Output  1:       p0 (min =  1.75e-02  max =  1.24e+00)  ;;;;;;;"]
a=[a,";;;;     Output  2:       p1 (min =  8.36e-02  max =  4.27e-01)  ;;;;;;;"]
a=[a,";;;;     Output  3:       p2 (min =  1.04e-01  max =  5.96e-01)  ;;;;;;;"]
a=[a,";;;;     Output  4:       p4 (min =  1.22e-01  max =  2.03e+00)  ;;;;;;;"]
a=[a,";;;;                                                             ;;;;;;;"]
a=[a,";;;;     If Input dimension is bad defined then this help        ;;;;;;;"]
a=[a,";;;;     message is printed and the result is the string:        ;;;;;;;"]
a=[a,";;;;     `something is wrong with your input dimension`          ;;;;;;;"]
a=[a,";;;;                                                             ;;;;;;;"]
a=[a,";;;;     If Input exceeds the range defined at training          ;;;;;;;"]
a=[a,";;;;     a warning message is printed. This message is           ;;;;;;;"]
a=[a,";;;;     supressed if the keyword no_warning is set.             ;;;;;;;"]
a=[a,";;;;                                                             ;;;;;;;"]
a=[a,";;;;     The index keyword returns a longword vector             ;;;;;;;"]
a=[a,";;;;     containing the subscripts of the input elements         ;;;;;;;"]
a=[a,";;;;     within the range defined at training.                   ;;;;;;;"]
a=[a,";;;;                                                             ;;;;;;;"]
a=[a,";;;;     If the return_partial_differential keyword is set       ;;;;;;;"]
a=[a,";;;;     the matrix of partial differentials d_out/d_in          ;;;;;;;"]
a=[a,";;;;     at the given input is returned. Here input must         ;;;;;;;"]
a=[a,";;;;     contain only one point in the input space.              ;;;;;;;"]
a=[a,";;;;     Up to now this works only for linear scaled in-         ;;;;;;;"]
a=[a,";;;;     and output.                                             ;;;;;;;"]
a=[a,";;;;                                                             ;;;;;;;"]
a=[a,";;;;           Rene Preusker                                     ;;;;;;;"]
a=[a,";;;;                                                             ;;;;;;;"]
a=[a,";;;;           rene.preusker@wew.fu-berlin.de                    ;;;;;;;"]
a=[a,";;;;                                                             ;;;;;;;"]
a=[a,";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"]
a=[a,";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"]
a=[a,";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"]
a=[a,";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"]
a=[a,";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"]
a=[a,";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"]
print,a,format="(a72)"
end
 
 
 
 
function sigmoide, x , temperatur
in= (((temperatur*x)>(-80.))<80.)*(-1.)
out=1./(1.+exp(in))
return,out
end
 
 
function cm_ws_to_gauss2d_nn,input, no_warning=no_warning,help=help,index=index  $
         ,max_train_in=max_train_in,min_train_in=min_train_in $
         ,return_partial_differential=return_partial_differential
if keyword_set(help) or (n_params() ne 1) then begin
	y=0
	help_cm_ws_to_gauss2d_nn
	goto,ende
endif
x=input
help,input,output=help_x
y="something is wrong with your input dimension:"
dimi =        3
dimo =        4
dimh =       30
bias_h =       1.00000
bias_i =       1.00000
sizex=size(input)
if sizex(0) eq 1 then begin
	x=transpose(x)
	if sizex(1) ne dimi then begin
		help_cm_ws_to_gauss2d_nn
		print,y
		print,help_x
		goto,ende
		endif
	in=fltarr(1,dimi+1)
	zw=fltarr(1,dimh+1)
	endif
if sizex(0) eq 2 then begin
	if sizex(2) ne dimi then begin
		help_cm_ws_to_gauss2d_nn
		print,y
		print,help_x
		goto,ende
		endif
	in=fltarr(sizex(1),dimi+1)
	zw=fltarr(sizex(1),dimh+1)
	endif
if (sizex(0) ne 1) and (sizex(0) ne 2) then begin
	help_cm_ws_to_gauss2d_nn
	print,y
	print,help_x
	goto,ende
	endif
 
 
 
max_train_in = fltarr(dimi)
min_train_in = fltarr(dimi)
max_train_in(       0)= 1.500000000e+01
max_train_in(       1)= 1.399999976e+00
max_train_in(       2)= 9.926099777e-01
min_train_in(       0)= 1.000000000e+00
min_train_in(       1)= 1.299999952e+00
min_train_in(       2)= 6.040430069e-01
index=where((x(*,0) le max_train_in(0)) $
        and (x(*,0) ge min_train_in(0)))
if index(0) ne -1 then begin 
	for i=1, dimi-1 do begin
 	     dum=where((x(index,i) le max_train_in(i))       $
 	           and (x(index,i) ge min_train_in(i)))
 	     if (dum(0) ne -1) then index=index(dum) else index=[-1]
    endfor
endif 
 
  
if not (keyword_set(no_warning)) then begin
  names_in     = strarr(dimi)
  names_in(       0)='ws'
  names_in(       1)='n_ref'
  names_in(       2)='cos_sun'
  wo_dum1      = replicate("  ",dimi)
  wo_dum2      = replicate("  ",dimi)
  max_in = fltarr(dimi)
  min_in = fltarr(dimi)
  for i=0,dimi-1 do max_in(i)=max(x(*,i)) 
  for i=0,dimi-1 do min_in(i)=min(x(*,i)) 
  max_gt= (max_in gt max_train_in)
  if total (max_gt) gt 0 then begin
     print,""
     print,"WARNING: Maximum of Input is greater than Maximum of Train Input: "
     format='(a33,3(a9,2x,"|",1x))'
     print,"Name of Input         | ", names_in, format=format
     format='(a33,3("-----------","+","-"))'
     print,"----------------------+-", format=format
     format='(a33,3(e9.2,2x,"|",1x))'
     print,"Maximum of Traininput | ", max_train_in, format=format
     print,"Maximum of Input      | ", max_in, format=format
     wo_dum1(where(max_gt))="/\"
     wo_dum2(where(max_gt))="||"
     format='(a33,3(6x,a2,3x," ",1x))'
     print,"                        ",wo_dum1, format=format
     print,"                        ",wo_dum2, format=format
     wo_dum1(where(max_gt))="  "
     wo_dum2(where(max_gt))="  "
     print,""
    endif
  min_lt= (min_in lt min_train_in)
  if total(min_lt) gt 0 then begin
     print,""
     print,"WARNING: Minimum of Input is less than Minimum of Train Input:"
     format='(a33,3(a9,2x,"|",1x))'
     print,"Name of Input         | ", names_in, format=format
     format='(a33,3("-----------","+","-"))'
     print,"----------------------+-", format=format
     format='(a33,3(e9.2,2x,"|",1x))'
     print,"Minimum of Traininput | ", min_train_in, format=format
     print,"Minimum of Input      | ", min_in, format=format
     wo_dum1(where(min_lt))="/\"
     wo_dum2(where(min_lt))="||"
     format='(a33,3(6x,a2,3x," ",1x))'
     print,"                        ",wo_dum1, format=format
     print,"                        ",wo_dum2, format=format
     print,""
    endif
endif
 
 
x(*,       0)=( 5.000000075e-02)+( 6.428571045e-02)*(x(*,       0)-( 1.000000000e+00))
x(*,       1)=( 5.000000075e-02)+( 8.999998093e+00)*(x(*,       1)-( 1.299999952e+00))
x(*,       2)=( 5.000000075e-02)+( 2.316202879e+00)*(x(*,       2)-( 6.040430069e-01))
 
in(*,0:dimi-1)=x(*,0:dimi-1)
in(*,dimi)=in(*,dimi)*0.+bias_i
zw(*,dimh)=zw(*,dimh)*0.+bias_h
inv=fltarr(dimi+1,dimh)
outv=fltarr(dimh+1,dimo)
inv(       0,       0)=-2.939744949e+01
inv(       0,       1)= 1.132299328e+01
inv(       0,       2)= 2.263254929e+01
inv(       0,       3)= 3.884647846e+00
inv(       0,       4)= 1.177011948e+02
inv(       0,       5)= 2.027080297e+00
inv(       0,       6)=-2.385963058e+01
inv(       0,       7)=-4.836808890e-02
inv(       0,       8)= 9.570610523e-01
inv(       0,       9)= 9.925829887e+00
inv(       0,      10)=-8.633911133e+00
inv(       0,      11)=-8.845272064e+00
inv(       0,      12)=-7.860549450e+00
inv(       0,      13)= 1.227825737e+01
inv(       0,      14)= 9.363747597e+00
inv(       0,      15)= 1.375763607e+01
inv(       0,      16)= 5.645298004e+00
inv(       0,      17)= 2.317027283e+01
inv(       0,      18)= 8.772719574e+01
inv(       0,      19)=-2.091823959e+01
inv(       0,      20)=-2.837905502e+01
inv(       0,      21)= 9.344512939e+00
inv(       0,      22)=-1.395036602e+01
inv(       0,      23)=-1.144876289e+01
inv(       0,      24)=-4.573270416e+01
inv(       0,      25)= 8.650843620e+00
inv(       0,      26)=-5.149719238e+01
inv(       0,      27)=-7.516960144e+00
inv(       0,      28)=-5.072515965e+00
inv(       0,      29)=-4.694109857e-01
inv(       1,       0)= 1.772934794e+00
inv(       1,       1)=-7.605744004e-01
inv(       1,       2)= 7.580370456e-02
inv(       1,       3)= 1.237352610e+00
inv(       1,       4)=-5.270220757e+00
inv(       1,       5)= 6.768359542e-01
inv(       1,       6)= 2.493114620e-01
inv(       1,       7)= 1.199997030e-02
inv(       1,       8)= 1.048263788e+00
inv(       1,       9)= 3.156276345e-01
inv(       1,      10)= 2.684150696e+00
inv(       1,      11)=-4.536240399e-01
inv(       1,      12)= 6.438461542e-01
inv(       1,      13)=-1.298081994e+00
inv(       1,      14)= 3.166410327e-01
inv(       1,      15)=-7.581256032e-01
inv(       1,      16)= 7.026982903e-01
inv(       1,      17)= 8.583801985e-02
inv(       1,      18)=-2.199418306e+00
inv(       1,      19)= 3.720495462e+00
inv(       1,      20)= 1.608472466e+00
inv(       1,      21)= 1.367151737e-01
inv(       1,      22)=-1.659875035e+00
inv(       1,      23)= 1.516348958e+00
inv(       1,      24)= 9.119551659e+00
inv(       1,      25)= 2.632774115e+00
inv(       1,      26)=-6.661900282e-01
inv(       1,      27)=-9.976466894e-01
inv(       1,      28)= 2.965508223e+00
inv(       1,      29)= 5.265955925e-01
inv(       2,       0)=-5.647046566e+00
inv(       2,       1)=-4.971585751e+00
inv(       2,       2)= 1.674654198e+01
inv(       2,       3)=-1.387738323e+01
inv(       2,       4)= 6.541867065e+01
inv(       2,       5)= 1.846276283e+01
inv(       2,       6)=-1.745218635e-01
inv(       2,       7)= 7.516007996e+01
inv(       2,       8)= 3.133180618e+01
inv(       2,       9)= 1.267245388e+01
inv(       2,      10)= 2.109567642e+01
inv(       2,      11)= 6.484725952e+00
inv(       2,      12)= 1.984746933e+01
inv(       2,      13)= 3.521361589e+00
inv(       2,      14)= 1.438139153e+01
inv(       2,      15)= 7.757419109e+00
inv(       2,      16)=-1.084439373e+01
inv(       2,      17)= 1.045183468e+01
inv(       2,      18)= 3.696617365e+00
inv(       2,      19)= 2.553618622e+01
inv(       2,      20)= 8.502095222e+00
inv(       2,      21)= 1.838636017e+01
inv(       2,      22)= 3.711297512e+00
inv(       2,      23)= 8.220674396e-01
inv(       2,      24)= 6.468188477e+01
inv(       2,      25)=-9.874113798e-01
inv(       2,      26)=-5.142375827e-01
inv(       2,      27)= 1.778322607e-01
inv(       2,      28)= 6.923731327e+00
inv(       2,      29)=-1.649557114e+01
inv(       3,       0)= 2.801163197e+00
inv(       3,       1)=-7.083124638e+00
inv(       3,       2)=-4.030000687e+01
inv(       3,       3)=-1.755561352e+00
inv(       3,       4)=-3.528027058e+00
inv(       3,       5)=-9.668167114e+00
inv(       3,       6)= 2.086749077e+00
inv(       3,       7)=-7.692342377e+01
inv(       3,       8)=-2.289043903e+00
inv(       3,       9)=-1.651420212e+01
inv(       3,      10)= 9.764242768e-01
inv(       3,      11)= 4.849936962e+00
inv(       3,      12)=-8.532129288e+00
inv(       3,      13)=-4.914777279e+00
inv(       3,      14)=-7.062028408e+00
inv(       3,      15)=-1.491364861e+01
inv(       3,      16)= 4.233810425e+00
inv(       3,      17)=-5.419121742e+00
inv(       3,      18)= 9.884844422e-01
inv(       3,      19)= 1.463968468e+01
inv(       3,      20)= 2.929061890e+01
inv(       3,      21)=-1.328092480e+01
inv(       3,      22)= 3.696933270e+00
inv(       3,      23)= 3.148838282e+00
inv(       3,      24)= 3.947730637e+01
inv(       3,      25)= 2.872228622e+00
inv(       3,      26)=-1.267176270e-01
inv(       3,      27)= 6.026681423e+00
inv(       3,      28)= 5.993208408e+00
inv(       3,      29)= 1.553936768e+01
outv(       0,       0)= 4.299206161e+01
outv(       0,       1)=-1.642685056e+00
outv(       0,       2)=-3.706720352e+00
outv(       0,       3)=-4.273964882e+00
outv(       1,       0)= 7.303111553e+00
outv(       1,       1)= 1.138021278e+01
outv(       1,       2)= 6.749811649e+00
outv(       1,       3)= 2.906709862e+01
outv(       2,       0)= 5.601442814e+00
outv(       2,       1)= 8.914100647e+01
outv(       2,       2)= 9.585584641e+00
outv(       2,       3)=-1.698953247e+01
outv(       3,       0)= 3.108134651e+01
outv(       3,       1)=-4.936972618e+00
outv(       3,       2)= 1.829988289e+01
outv(       3,       3)= 1.536205196e+01
outv(       4,       0)=-8.970130920e+01
outv(       4,       1)=-1.534368396e-01
outv(       4,       2)=-5.624227047e+00
outv(       4,       3)=-2.514125705e-01
outv(       5,       0)=-2.611935997e+01
outv(       5,       1)= 9.213145256e+00
outv(       5,       2)=-1.309362602e+01
outv(       5,       3)= 1.072190762e+01
outv(       6,       0)= 1.789621925e+01
outv(       6,       1)=-3.109739304e+01
outv(       6,       2)=-2.076713371e+01
outv(       6,       3)= 4.593782425e+00
outv(       7,       0)= 1.523993015e+00
outv(       7,       1)= 6.068258882e-01
outv(       7,       2)= 2.518664598e+00
outv(       7,       3)=-1.051980209e+02
outv(       8,       0)=-5.987927628e+01
outv(       8,       1)= 4.169242859e+00
outv(       8,       2)= 6.144793510e+00
outv(       8,       3)=-1.005692124e+00
outv(       9,       0)= 1.499199295e+01
outv(       9,       1)= 1.952601242e+01
outv(       9,       2)= 1.192200756e+01
outv(       9,       3)=-2.490645790e+01
outv(      10,       0)= 1.551729870e+01
outv(      10,       1)= 3.073350191e+00
outv(      10,       2)=-1.243579960e+01
outv(      10,       3)= 3.728325292e-02
outv(      11,       0)= 1.269130135e+01
outv(      11,       1)=-1.305799580e+01
outv(      11,       2)=-6.943742752e+00
outv(      11,       3)=-1.008879757e+01
outv(      12,       0)= 6.610927582e+00
outv(      12,       1)=-3.285413980e+00
outv(      12,       2)=-7.118395329e+00
outv(      12,       3)= 4.365545750e+00
outv(      13,       0)= 1.442875147e+00
outv(      13,       1)= 3.853841305e+00
outv(      13,       2)= 8.127375603e+00
outv(      13,       3)= 1.686726189e+01
outv(      14,       0)= 2.547131062e+00
outv(      14,       1)= 8.266163826e+00
outv(      14,       2)= 1.445966148e+01
outv(      14,       3)=-2.135052299e+01
outv(      15,       0)= 2.264236212e+00
outv(      15,       1)= 9.202192307e+00
outv(      15,       2)= 1.135377502e+01
outv(      15,       3)=-1.660389185e+00
outv(      16,       0)= 1.026830673e+01
outv(      16,       1)=-6.319087982e+00
outv(      16,       2)= 1.099032974e+01
outv(      16,       3)= 1.252798462e+01
outv(      17,       0)= 3.353076935e+01
outv(      17,       1)=-1.092971563e+00
outv(      17,       2)= 1.556612396e+01
outv(      17,       3)= 5.891263008e+00
outv(      18,       0)=-4.945058060e+01
outv(      18,       1)= 2.069297409e+01
outv(      18,       2)= 2.524566269e+01
outv(      18,       3)= 2.331147432e+00
outv(      19,       0)=-1.612775803e+01
outv(      19,       1)= 2.608105421e+00
outv(      19,       2)=-1.599517345e+01
outv(      19,       3)=-2.346667290e+01
outv(      20,       0)= 1.947193527e+01
outv(      20,       1)=-1.014953613e+01
outv(      20,       2)=-2.860051727e+01
outv(      20,       3)=-3.661820173e+00
outv(      21,       0)= 1.178337479e+01
outv(      21,       1)=-7.226673961e-01
outv(      21,       2)= 1.685874748e+01
outv(      21,       3)=-7.793147564e+00
outv(      22,       0)= 2.554101706e+00
outv(      22,       1)=-1.064359951e+01
outv(      22,       2)=-2.179607391e+00
outv(      22,       3)=-1.587461948e+00
outv(      23,       0)= 2.442389297e+01
outv(      23,       1)=-1.262978840e+01
outv(      23,       2)=-5.170538902e+00
outv(      23,       3)=-1.316938996e+00
outv(      24,       0)=-1.820500755e+01
outv(      24,       1)= 2.323711872e+00
outv(      24,       2)=-2.487753105e+01
outv(      24,       3)=-3.937118912e+01
outv(      25,       0)= 2.280250549e+01
outv(      25,       1)= 5.057149410e+00
outv(      25,       2)= 8.108019829e+00
outv(      25,       3)= 8.004907608e+00
outv(      26,       0)= 1.763088799e+01
outv(      26,       1)=-3.695954132e+01
outv(      26,       2)=-2.948822975e+01
outv(      26,       3)= 5.141349792e+00
outv(      27,       0)= 1.095130253e+01
outv(      27,       1)=-1.262412643e+01
outv(      27,       2)=-4.870752335e+00
outv(      27,       3)= 4.262862206e+00
outv(      28,       0)= 1.170500755e+01
outv(      28,       1)=-9.703153610e+00
outv(      28,       2)=-5.839546680e+00
outv(      28,       3)=-8.741853714e+00
outv(      29,       0)= 1.313036823e+01
outv(      29,       1)=-2.983437061e+00
outv(      29,       2)= 4.276635170e+00
outv(      29,       3)= 3.370246506e+01
outv(      30,       0)= 2.501111031e+01
outv(      30,       1)=-2.658418179e+00
outv(      30,       2)= 6.957148075e+00
outv(      30,       3)= 9.156510353e+00
temperatur =  1.000000000e+00
zw(*,0:dimh-1)=sigmoide(in#inv,temperatur/float(dimi))
y=sigmoide(zw#outv,temperatur/float(dimh))

if keyword_set(return_partial_differential) then begin
	if n_elements(x) ne dimi then begin
		print,"Matrix of partial differentials will be calculated"
		print,"on one point in input space only. Thus input"
		print,"must have the dimension (1,"+string(dimi)+") or ("+string(dimi)+")!"
		return,"Something is wrong with your input!"
		endif
	zws=zw*(1.-zw)*temperatur/float(dimi)
	ys=y*(1.-y)*temperatur/float(dimh)
	e_in=fltarr(dimi,dimi)
	e_in[       0,       0]= 6.428571045e-02
	e_in[       1,       1]= 8.999998093e+00
	e_in[       2,       2]= 2.316202879e+00
	e_z=fltarr(dimh,dimh)
	for i=0,dimh-1 do e_z[i,i]=zws[i]
	e_y=fltarr(dimo,dimo)
	for i=0,dimo-1 do e_y[i,i]=ys[i]
	e_out=fltarr(dimo,dimo)
	e_out[       0,       0]=1./ 6.547441483e-01
	e_out[       1,       1]=1./ 2.331871986e+00
	e_out[       2,       2]=1./ 1.625969887e+00
	e_out[       3,       3]=1./ 4.197956622e-01
	return,(((((e_in#inv[0:dimi-1,*])#e_z)#outv[0:dimh-1,*])#e_y)#e_out)
	endif
y(*,       0)=(y(*,       0)-( 1.000000015e-01))/( 6.547441483e-01)+( 1.750879921e-02)
y(*,       1)=(y(*,       1)-( 1.000000015e-01))/( 2.331871986e+00)+( 8.358199894e-02)
y(*,       2)=(y(*,       2)-( 1.000000015e-01))/( 1.625969887e+00)+( 1.043199971e-01)
y(*,       3)=(y(*,       3)-( 1.000000015e-01))/( 4.197956622e-01)+( 1.216809973e-01)
if sizex(0) eq 1 then begin
	y=transpose(y)
	endif
ende:
return,y
end
